{"b8c57d4b57124ff14c952bae5c7f053aa81d9706":{"changes":{"source\/scripts\/chartist.core.js":"MODIFY"},"diff":{"source\/scripts\/chartist.core.js":[{"add":["259","    \/\/ If high and low are the same because of misconfiguration or flat data (only the same value) we need","260","    \/\/ to set the high or low to 0 depending on the polarity","261","    if(bounds.high === bounds.low) {","262","      \/\/ If both values are 0 we set high to 1","263","      if(bounds.low === 0) {","264","        bounds.high = 1;","265","      } else if(bounds.low < 0) {","266","        \/\/ If we have the same negative value for the bounds we set bounds.high to 0","267","        bounds.high = 0;","268","      } else {","269","        \/\/ If we have the same positive value for the bounds we set bounds.low to 0","270","        bounds.low = 0;","271","      }","272","    }","273",""],"delete":[]}]}},"1438bad5b8754fe0744c4c1c8540c08a4c4e6862":{"changes":{"package.json":"MODIFY"},"diff":{"package.json":[{"add":["47","      \".\": {","48","        \"require\": \".\/dist\/index.cjs\",","49","        \"import\": \".\/dist\/index.js\"","50","      },","51","      \".\/dist\/*\": \".\/dist\/*\""],"delete":["47","      \"require\": \".\/dist\/index.cjs\",","48","      \"import\": \".\/dist\/index.js\""]}]}},"07efd722dc5546ec19f2d9545fb575d2a6d2706e":{"changes":{"src\/scripts\/charts\/pie.js":"MODIFY"},"diff":{"src\/scripts\/charts\/pie.js":[{"add":["228","        var labelPosition;","229","        if(data.raw.series.length === 1) {","230","          \/\/ If we have only 1 series, we can position the label in the center of the pie","231","          labelPosition = {","232","            x: center.x,","233","            y: center.y","234","          };","235","        } else {","236","          \/\/ Position at the labelRadius distance from center and between start and end angle","237","          labelPosition = Chartist.polarToCartesian(","238","            center.x,","239","            center.y,","240","            labelRadius,","241","            startAngle + (endAngle - startAngle) \/ 2","242","          );","243","        }"],"delete":["228","        \/\/ Position at the labelRadius distance from center and between start and end angle","229","        var labelPosition = Chartist.polarToCartesian(","230","          center.x,","231","          center.y,","232","          labelRadius,","233","          startAngle + (endAngle - startAngle) \/ 2","234","        );"]}]}},"eb56a3a6b896db8ffa30aef65d674a791f1a98bf":{"changes":{"src\/scripts\/svg.js":"MODIFY"},"diff":{"src\/scripts\/svg.js":[{"add":["313","   * Get element height using `getBoundingClientRect`","319","    return this._node.getBoundingClientRect().height;","323","   * Get element width using `getBoundingClientRect`","329","    return this._node.getBoundingClientRect().width;"],"delete":["313","   * \"Save\" way to get property value from svg BoundingBox.","314","   * This is a workaround. Firefox throws an NS_ERROR_FAILURE error if getBBox() is called on an invisible node.","315","   * See [NS_ERROR_FAILURE: Component returned failure code: 0x80004005](http:\/\/jsfiddle.net\/sym3tri\/kWWDK\/)","316","   *","317","   * @memberof Chartist.Svg","318","   * @param {SVGElement} node The svg node to","319","   * @param {String} prop The property to fetch (ex.: height, width, ...)","320","   * @returns {Number} The value of the given bbox property","321","   *\/","322","  function getBBoxProperty(node, prop) {","323","    try {","324","      return node.getBBox()[prop];","325","    } catch(e) {}","326","","327","    return 0;","328","  }","329","","330","  \/**","331","   * Get element height with fallback to svg BoundingBox or parent container dimensions:","332","   * See [bugzilla.mozilla.org](https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=530985)","338","    return this._node.clientHeight || Math.round(getBBoxProperty(this._node, 'height')) || this._node.parentNode.clientHeight;","342","   * Get element width with fallback to svg BoundingBox or parent container dimensions:","343","   * See [bugzilla.mozilla.org](https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=530985)","349","    return this._node.clientWidth || Math.round(getBBoxProperty(this._node, 'width')) || this._node.parentNode.clientWidth;"]}]}},"4bb0ac89df7a031a43bdab8ad22643ac5a2fa30b":{"changes":{"src\/scripts\/charts\/pie.js":"MODIFY"},"diff":{"src\/scripts\/charts\/pie.js":[{"add":["197","        if(interpolatedValue || interpolatedValue === 0) {","198","          var labelElement = seriesGroups[i].elem('text', {","199","            dx: labelPosition.x,","200","            dy: labelPosition.y,","201","            'text-anchor': determineAnchorPosition(center, labelPosition, options.labelDirection)","202","          }, options.classNames.label).text('' + interpolatedValue);","204","          \/\/ Fire off draw event","205","          this.eventEmitter.emit('draw', {","206","            type: 'label',","207","            index: i,","208","            group: seriesGroups[i],","209","            element: labelElement,","210","            text: '' + interpolatedValue,","211","            x: labelPosition.x,","212","            y: labelPosition.y","213","          });","214","        }"],"delete":["197","        var labelElement = seriesGroups[i].elem('text', {","198","          dx: labelPosition.x,","199","          dy: labelPosition.y,","200","          'text-anchor': determineAnchorPosition(center, labelPosition, options.labelDirection)","201","        }, options.classNames.label).text('' + interpolatedValue);","203","        \/\/ Fire off draw event","204","        this.eventEmitter.emit('draw', {","205","          type: 'label',","206","          index: i,","207","          group: seriesGroups[i],","208","          element: labelElement,","209","          text: '' + interpolatedValue,","210","          x: labelPosition.x,","211","          y: labelPosition.y","212","        });"]}]}},"436f5089dffd436a7f068d8e4b2344d9953cccc3":{"changes":{"src\/scripts\/base.js":"MODIFY"},"diff":{"src\/scripts\/base.js":[{"add":["20","   * @param {Boolean} [extendObjects] If set to true, the passed options will be used to extend the options that have been configured already.","23","  function update(data, options, extendObjects) {","34","      this.options = Chartist.extend({}, extendObjects ? this.options : {}, options);","35","","36","      \/\/ If chartist was not initialized yet, we just set the options and leave the rest to the initialization","37","      if(!this.initializeTimeoutId) {","38","        this.optionsProvider.removeMediaQueryListeners();","39","        this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);","40","      }","43","    \/\/ Only re-created the chart if it has been initialized yet","44","    if(!this.initializeTimeoutId) {","45","      this.createChart(this.optionsProvider.currentOptions);","46","    }","47","","48","    \/\/ Return a reference to the chart object to chain up calls"],"delete":["22","  function update(data, options) {","33","      this.options = Chartist.extend({}, this.options, options);","34","      this.optionsProvider.removeMediaQueryListeners();","35","      this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);","38","    this.createChart(this.optionsProvider.currentOptions);"]}]}},"4a636bc7fb1add702ebdd83e9dc383bd7bf91d43":{"changes":{"src\/scripts\/core.js":"MODIFY","src\/scripts\/charts\/line.js":"MODIFY","src\/scripts\/charts\/bar.js":"MODIFY","src\/scripts\/axes\/fixed-scale-axis.js":"MODIFY","src\/scripts\/axes\/auto-scale-axis.js":"MODIFY","src\/scripts\/charts\/pie.js":"MODIFY","test\/spec\/spec-axes.js":"MODIFY","src\/scripts\/base.js":"MODIFY"},"diff":{"src\/scripts\/core.js":[{"add":["333","  Chartist.normalizeData = function(data, reverse, multi) {","334","    var labelCount;","335","    var output = {","336","      raw: data,","337","      normalized: {}","338","    };","341","    output.normalized.series = Chartist.getDataArray({","342","      series: data.series || []","343","    }, reverse, multi);","345","    \/\/ If all elements of the normalized data array are arrays we're dealing with","346","    \/\/ multi series data and we need to find the largest series if they are un-even","347","    if (output.normalized.series.every(function(value) {","350","      \/\/ Getting the series with the the most elements","351","      labelCount = Math.max.apply(null, output.normalized.series.map(function(series) {","352","        return series.length;","353","      }));","354","    } else {","355","      \/\/ We're dealing with Pie data so we just take the normalized array length","356","      labelCount = output.normalized.series.length;","358","","359","    output.normalized.labels = (data.labels || []).slice();","360","    \/\/ Padding the labels to labelCount with empty strings","361","    Array.prototype.push.apply(","362","      output.normalized.labels,","363","      Chartist.times(Math.max(0, labelCount - output.normalized.labels.length)).map(function() {","364","        return '';","365","      })","366","    );","367","","368","    if(reverse) {","369","      Chartist.reverseData(output.normalized);","370","    }","371","","372","    return output;","427","  Chartist.getDataArray = function(data, reverse, multi) {"],"delete":["333","  Chartist.normalizeData = function(data) {","334","    \/\/ Ensure data is present otherwise enforce","335","    data = data || {series: [], labels: []};","336","    data.series = data.series || [];","337","    data.labels = data.labels || [];","340","    if (data.series.length > 0 && data.labels.length === 0) {","341","      var normalized = Chartist.getDataArray(data),","342","          labelCount;","344","      \/\/ If all elements of the normalized data array are arrays we're dealing with","345","      \/\/ data from Bar or Line charts and we need to find the largest series if they are un-even","346","      if (normalized.every(function(value) {","349","        \/\/ Getting the series with the the most elements","350","        labelCount = Math.max.apply(null, normalized.map(function(series) {","351","          return series.length;","352","        }));","353","      } else {","354","        \/\/ We're dealing with Pie data so we just take the normalized array length","355","        labelCount = normalized.length;","356","      }","357","","358","      \/\/ Setting labels to an array with emptry strings using our labelCount estimated above","359","      data.labels = Chartist.times(labelCount).map(function() {","360","        return '';","361","      });","363","    return data;","418","  Chartist.getDataArray = function (data, reverse, multi) {","419","    \/\/ If the data should be reversed but isn't we need to reverse it","420","    \/\/ If it's reversed but it shouldn't we need to reverse it back","421","    \/\/ That's required to handle data updates correctly and to reflect the responsive configurations","422","    if(reverse && !data.reversed || !reverse && data.reversed) {","423","      Chartist.reverseData(data);","424","      data.reversed = !data.reversed;","425","    }","426",""]}],"src\/scripts\/charts\/line.js":[{"add":["71","    \/\/ The base for the area chart that will be used to close the area shape (is normally 0)","77","    \/\/ Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value","116","    var data = Chartist.normalizeData(this.data, options.reverseData, true);","129","      axisX = new Chartist.StepAxis(Chartist.Axis.units.x, data.normalized.series, chartRect, Chartist.extend({}, options.axisX, {","130","        ticks: data.normalized.labels,","134","      axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data.normalized.series, chartRect, options.axisX);","138","      axisY = new Chartist.AutoScaleAxis(Chartist.Axis.units.y, data.normalized.series, chartRect, Chartist.extend({}, options.axisY, {","143","      axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data.normalized.series, chartRect, options.axisY);","152","","172","      data.normalized.series[seriesIndex].forEach(function(value, valueIndex) {","174","          x: chartRect.x1 + axisX.projectValue(value, valueIndex, data.normalized.series[seriesIndex]),","175","          y: chartRect.y1 - axisY.projectValue(value, valueIndex, data.normalized.series[seriesIndex])","239","          values: data.normalized.series[seriesIndex],","293","            values: data.normalized.series[seriesIndex],"],"delete":["71","    \/\/ The base for the area chart that will be used to close the area shape (is normally 0)    ","77","    \/\/ Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value    ","116","    this.data = Chartist.normalizeData(this.data);","117","    var data = {","118","      raw: this.data,","119","      normalized: Chartist.getDataArray(this.data, options.reverseData, true)","120","    };","133","      axisX = new Chartist.StepAxis(Chartist.Axis.units.x, data, chartRect, Chartist.extend({}, options.axisX, {","134","        ticks: data.raw.labels,","138","      axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data, chartRect, options.axisX);","142","      axisY = new Chartist.AutoScaleAxis(Chartist.Axis.units.y, data, chartRect, Chartist.extend({}, options.axisY, {","147","      axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data, chartRect, options.axisY);","156","    ","176","      data.normalized[seriesIndex].forEach(function(value, valueIndex) {","178","          x: chartRect.x1 + axisX.projectValue(value, valueIndex, data.normalized[seriesIndex]),","179","          y: chartRect.y1 - axisY.projectValue(value, valueIndex, data.normalized[seriesIndex])","243","          values: data.normalized[seriesIndex],","297","            values: data.normalized[seriesIndex],"]}],"src\/scripts\/charts\/bar.js":[{"add":["112","    var data;","115","    if(options.distributeSeries) {","116","      data = Chartist.normalizeData(this.data, options.reverseData, options.horizontalBars ? 'x' : 'y');","117","      data.normalized.series = data.normalized.series.map(function(value) {","118","        return [value];","119","      });","120","    } else {","121","      data = Chartist.normalizeData(this.data, options.reverseData, options.horizontalBars ? 'x' : 'y');","122","    }","123","","137","    if(options.stackBars && data.normalized.series.length !== 0) {","139","      var serialSums = Chartist.serialMap(data.normalized.series, function serialSums() {","154","      highLow = Chartist.getHighLow(data.normalized.series, Chartist.extend({}, options, {","174","      labelAxisTicks = data.normalized.labels.slice(0, 1);","179","      labelAxisTicks = data.normalized.labels;","185","        valueAxis = axisX = new Chartist.AutoScaleAxis(Chartist.Axis.units.x, data.normalized.series, chartRect, Chartist.extend({}, options.axisX, {","190","        valueAxis = axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data.normalized.series, chartRect, Chartist.extend({}, options.axisX, {","197","        labelAxis = axisY = new Chartist.StepAxis(Chartist.Axis.units.y, data.normalized.series, chartRect, {","201","        labelAxis = axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data.normalized.series, chartRect, options.axisY);","205","        labelAxis = axisX = new Chartist.StepAxis(Chartist.Axis.units.x, data.normalized.series, chartRect, {","209","        labelAxis = axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data.normalized.series, chartRect, options.axisX);","213","        valueAxis = axisY = new Chartist.AutoScaleAxis(Chartist.Axis.units.y, data.normalized.series, chartRect, Chartist.extend({}, options.axisY, {","218","        valueAxis = axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data.normalized.series, chartRect, Chartist.extend({}, options.axisY, {","250","        periodHalfLength = labelAxis.axisLength \/ data.normalized.series.length \/ 2;","257","        periodHalfLength = labelAxis.axisLength \/ data.normalized.series[seriesIndex].length \/ 2;","275","      data.normalized.series[seriesIndex].forEach(function(value, valueIndex) {","298","            x: chartRect.x1 + valueAxis.projectValue(value && value.x ? value.x : 0, valueIndex, data.normalized.series[seriesIndex]),","299","            y: chartRect.y1 - labelAxis.projectValue(value && value.y ? value.y : 0, labelAxisValueIndex, data.normalized.series[seriesIndex])","303","            x: chartRect.x1 + labelAxis.projectValue(value && value.x ? value.x : 0, labelAxisValueIndex, data.normalized.series[seriesIndex]),","304","            y: chartRect.y1 - valueAxis.projectValue(value && value.y ? value.y : 0, valueIndex, data.normalized.series[seriesIndex])","353",""],"delete":["112","    this.data = Chartist.normalizeData(this.data);","113","    var data = {","114","      raw: this.data,","115","      normalized: options.distributeSeries ? Chartist.getDataArray(this.data, options.reverseData, options.horizontalBars ? 'x' : 'y').map(function(value) {","116","        return [value];","117","      }) : Chartist.getDataArray(this.data, options.reverseData, options.horizontalBars ? 'x' : 'y')","118","    };","119","","135","    if(options.stackBars && data.normalized.length !== 0) {","137","      var serialSums = Chartist.serialMap(data.normalized, function serialSums() {","152","      highLow = Chartist.getHighLow(data.normalized, Chartist.extend({}, options, {","172","      labelAxisTicks = data.raw.labels.slice(0, 1);","177","      labelAxisTicks = data.raw.labels;","183","        valueAxis = axisX = new Chartist.AutoScaleAxis(Chartist.Axis.units.x, data, chartRect, Chartist.extend({}, options.axisX, {","188","        valueAxis = axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data, chartRect, Chartist.extend({}, options.axisX, {","195","        labelAxis = axisY = new Chartist.StepAxis(Chartist.Axis.units.y, data, chartRect, {","199","        labelAxis = axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data, chartRect, options.axisY);","203","        labelAxis = axisX = new Chartist.StepAxis(Chartist.Axis.units.x, data, chartRect, {","207","        labelAxis = axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data, chartRect, options.axisX);","211","        valueAxis = axisY = new Chartist.AutoScaleAxis(Chartist.Axis.units.y, data, chartRect, Chartist.extend({}, options.axisY, {","216","        valueAxis = axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data, chartRect, Chartist.extend({}, options.axisY, {","248","        periodHalfLength = labelAxis.axisLength \/ data.normalized.length \/ 2;","255","        periodHalfLength = labelAxis.axisLength \/ data.normalized[seriesIndex].length \/ 2;","273","      data.normalized[seriesIndex].forEach(function(value, valueIndex) {","296","            x: chartRect.x1 + valueAxis.projectValue(value && value.x ? value.x : 0, valueIndex, data.normalized[seriesIndex]),","297","            y: chartRect.y1 - labelAxis.projectValue(value && value.y ? value.y : 0, labelAxisValueIndex, data.normalized[seriesIndex])","301","            x: chartRect.x1 + labelAxis.projectValue(value && value.x ? value.x : 0, labelAxisValueIndex, data.normalized[seriesIndex]),","302","            y: chartRect.y1 - valueAxis.projectValue(value && value.y ? value.y : 0, valueIndex, data.normalized[seriesIndex])","351","        "]}],"src\/scripts\/axes\/fixed-scale-axis.js":[{"add":["24","    var highLow = options.highLow || Chartist.getHighLow(data, options, axisUnit.pos);"],"delete":["24","    var highLow = options.highLow || Chartist.getHighLow(data.normalized, options, axisUnit.pos);"]}],"src\/scripts\/axes\/auto-scale-axis.js":[{"add":["27","    var highLow = options.highLow || Chartist.getHighLow(data, options, axisUnit.pos);"],"delete":["27","    var highLow = options.highLow || Chartist.getHighLow(data.normalized, options, axisUnit.pos);"]}],"src\/scripts\/charts\/pie.js":[{"add":["83","    var data = Chartist.normalizeData(this.data);","90","      startAngle = options.startAngle;","99","    totalDataSum = options.total || data.normalized.series.reduce(function(previousValue, currentValue) {","135","    var hasSingleValInSeries = data.raw.series.filter(function(val) {","146","    for (var i = 0; i < data.raw.series.length; i++) {","148","      if (data.normalized.series[i] === 0 && options.ignoreEmptyValues) continue;","150","      var series = data.raw.series[i];","165","      var endAngle = (totalDataSum > 0 ? startAngle + data.normalized.series[i] \/ totalDataSum * 360 : 0);","197","        'ct:value': data.normalized.series[i],","211","        value: data.normalized.series[i],","228","        var labelPosition = Chartist.polarToCartesian(","229","          center.x,","230","          center.y,","231","          labelRadius,","232","          startAngle + (endAngle - startAngle) \/ 2","233","        );","234","","235","        var rawValue;","236","        if(data.normalized.labels && !Chartist.isFalseyButZero(data.normalized.labels[i])) {","237","          rawValue = data.normalized.labels[i];","238","        } else {","239","          rawValue = data.normalized.series[i];","240","        }","241","","242","        var interpolatedValue = options.labelInterpolationFnc(rawValue, i);"],"delete":["83","    this.data = Chartist.normalizeData(this.data);","90","      startAngle = options.startAngle,","91","      dataArray = Chartist.getDataArray(this.data, options.reverseData);","100","    totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) {","136","    var hasSingleValInSeries = this.data.series.filter(function(val) {","147","    for (var i = 0; i < this.data.series.length; i++) {","149","      if (dataArray[i] === 0 && options.ignoreEmptyValues) continue;","151","      var series = this.data.series[i];","166","      var endAngle = (totalDataSum > 0 ? startAngle + dataArray[i] \/ totalDataSum * 360 : 0);","198","        'ct:value': dataArray[i],","212","        value: dataArray[i],","229","        var labelPosition = Chartist.polarToCartesian(center.x, center.y, labelRadius, startAngle + (endAngle - startAngle) \/ 2),","230","          interpolatedValue = options.labelInterpolationFnc(this.data.labels && !Chartist.isFalseyButZero(this.data.labels[i]) ? this.data.labels[i] : dataArray[i], i);"]}],"test\/spec\/spec-axes.js":[{"add":["14","      data = [[1]],","41","      data = [[ {x: 1, y: 10}, {x: 2, y: 5}, {x: 3, y: -5} ]],"],"delete":["14","      data = {","15","        'raw': {","16","          'series':[[1]]","17","        }","18","      },","45","      data = {","46","        'raw': {","47","          'series':[[ {x: 1, y: 10}, {x: 2, y: 5}, {x: 3, y: -5} ]]","48","        },","49","        'normalized':[[ {'y':10,'x':1},{'y':5,'x':2},{'y':-5,'x':3} ]]","50","      },"]}],"src\/scripts\/base.js":[{"add":["25","      this.data = data || {};","26","      this.data.labels = this.data.labels || [];","27","      this.data.series = this.data.series || [];","147","    this.data = data || {};","148","    this.data.labels = this.data.labels || [];","149","    this.data.series = this.data.series || [];"],"delete":["25","      this.data = data;","145","    this.data = data;"]}]}},"1f677569eb38a888bbfa126d922fbbf8e0964f08":{"changes":{"src\/scripts\/core.js":"MODIFY","test\/spec\/spec-core.js":"MODIFY"},"diff":{"src\/scripts\/core.js":[{"add":["802","        values.push(value);"],"delete":["802","        values.push(i);"]}],"test\/spec\/spec-core.js":[{"add":["423","      expect(bounds.values).toEqual([Chartist.roundWithPrecision(999.9999999999999)]);"],"delete":["423","      expect(bounds.values).toEqual([999.9999999999999]);"]}]}},"994288576abdd6f0668f52958fb0667b712aa587":{"changes":{"src\/scripts\/core.js":"MODIFY"},"diff":{"src\/scripts\/core.js":[{"add":["164","   * This helper function can be used to round values with certain precision level after decimal. This is used to prevent rounding errors near float point precision limit.","165","   *","166","   * @memberof Chartist.Core","167","   * @param {Number} value The value that should be rounded with precision","168","   * @param {Number} [digits] The number of digits after decimal used to do the rounding","169","   * @returns {number} Rounded value","170","   *\/","171","  Chartist.roundWithPrecision = function(value, digits) {","172","    var precision = Math.pow(10, digits || Chartist.precision);","173","    return Math.round(value * precision) \/ precision;","174","  };","175","","176","  \/**","177","   * Precision level used internally in Chartist for rounding. If you require more decimal places you can increase this number.","178","   *","179","   * @memberof Chartist.Core","180","   * @type {number}","181","   *\/","182","  Chartist.precision = 8;","183","","184","  \/**","521","      bounds.values.push(Chartist.roundWithPrecision(i));"],"delete":["500","      bounds.values.push(i);"]}]}},"b8ef8d6d85ef8727b789745ce6db51cdce319785":{"changes":{"src\/scripts\/svg.js":"MODIFY"},"diff":{"src\/scripts\/svg.js":[{"add":["535","    return document.implementation.hasFeature('http:\/\/www.w3.org\/TR\/SVG11\/feature#' + feature, '1.1');"],"delete":["535","    return document.implementation.hasFeature('www.http:\/\/w3.org\/TR\/SVG11\/feature#' + feature, '1.1');"]}]}},"29c35a6d1e29b1eefba6187cfa4fc79a977c6f2f":{"changes":{"src\/scripts\/base.js":"MODIFY"},"diff":{"src\/scripts\/base.js":[{"add":["62","  function initialize() {","63","    \/\/ Add window resize listener that re-creates the chart","64","    window.addEventListener('resize', this.resizeListener);","65","","66","    \/\/ Obtain current options based on matching media queries (if responsive options are given)","67","    \/\/ This will also register a listener that is re-creating the chart based on media changes","68","    this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);","69","","70","    \/\/ Before the first chart creation we need to register us with all plugins that are configured","71","    \/\/ Initialize all relevant plugins with our chart object and the plugin options specified in the config","72","    if(this.options.plugins) {","73","      this.options.plugins.forEach(function(plugin) {","74","        if(plugin instanceof Array) {","75","          plugin[0](this, plugin[1]);","76","        } else {","77","          plugin(this);","78","        }","79","      }.bind(this));","80","    }","81","","82","    \/\/ Create the first chart","83","    this.createChart(this.optionsProvider.currentOptions);","84","","85","    \/\/ As chart is initialized from the event loop now we can reset our timeout reference","86","    \/\/ This is important if the chart gets initialized on the same element twice","87","    this.initializeTimeoutId = undefined;","88","  }","89","","114","        if(this.container.__chartist__.initializeTimeoutId) {","115","          \/\/ If the initializeTimeoutId is still set we can safely assume that the initialization function has not","116","          \/\/ been called yet from the event loop. Therefore we should cancel the timeout and don't need to detach","117","          window.clearTimeout(this.container.__chartist__.initializeTimeoutId);","118","        } else {","119","          \/\/ The timeout reference has already been reset which means we need to detach the old chart first","120","          this.container.__chartist__.detach();","121","        }","129","    this.initializeTimeoutId = setTimeout(initialize.bind(this), 0);"],"delete":["86","        this.container.__chartist__.detach();","92","    window.addEventListener('resize', this.resizeListener);","93","","96","    setTimeout(function() {","97","      \/\/ Obtain current options based on matching media queries (if responsive options are given)","98","      \/\/ This will also register a listener that is re-creating the chart based on media changes","99","      this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);","100","","101","      \/\/ Before the first chart creation we need to register us with all plugins that are configured","102","      \/\/ Initialize all relevant plugins with our chart object and the plugin options specified in the config","103","      if(this.options.plugins) {","104","        this.options.plugins.forEach(function(plugin) {","105","          if(plugin instanceof Array) {","106","            plugin[0](this, plugin[1]);","107","          } else {","108","            plugin(this);","109","          }","110","        }.bind(this));","111","      }","112","","113","      \/\/ Create the first chart","114","      this.createChart(this.optionsProvider.currentOptions);","115","    }.bind(this), 0);"]}]}},"b7ebb604bc4a7251d1aae649b23f80a164c7ac46":{"changes":{"src\/scripts\/charts\/line.js":"MODIFY","src\/scripts\/svg-path.js":"MODIFY","test\/spec\/spec-svg.js":"MODIFY"},"diff":{"src\/scripts\/charts\/line.js":[{"add":["261","        \/\/ In order to form the area we'll first split the path by move commands so we can chunk it up into segments","262","        path.splitByCommand('M').filter(function onlySolidSegments(pathSegment) {","263","          \/\/ We filter only \"solid\" segments that contain more than one point. Otherwise there's no need for an area","264","          return pathSegment.pathElements.length > 1;","265","        }).map(function convertToArea(solidPathSegments) {","266","          \/\/ Receiving the filtered solid path segments we can now convert those segments into fill areas","267","          var firstElement = solidPathSegments.pathElements[0];","268","          var lastElement = solidPathSegments.pathElements[solidPathSegments.pathElements.length - 1];","270","          \/\/ Cloning the solid path segment with closing option and removing the first move command from the clone","271","          \/\/ We then insert a new move that should start at the area base and draw a straight line up or down","272","          \/\/ at the end of the path we add an additional straight line to the projected area base value","273","          \/\/ As the closing option is set our path will be automatically closed","274","          return solidPathSegments.clone(true)","275","            .position(0)","276","            .remove(1)","277","            .move(firstElement.x, areaBaseProjected)","278","            .line(firstElement.x, firstElement.y)","279","            .position(solidPathSegments.pathElements.length + 1)","280","            .line(lastElement.x, areaBaseProjected);","282","        }).forEach(function createArea(areaPath) {","283","          \/\/ For each of our newly created area paths, we'll now create path elements by stringifying our path objects","284","          \/\/ and adding the created DOM elements to the correct series group","285","          var area = seriesGroups[seriesIndex].elem('path', {","286","            d: areaPath.stringify()","287","          }, options.classNames.area, true).attr({","288","            'values': normalizedData[seriesIndex]","289","          }, Chartist.xmlNs.uri);","290","","291","          \/\/ Emit an event for each area that was drawn","292","          this.eventEmitter.emit('draw', {","293","            type: 'area',","294","            values: normalizedData[seriesIndex],","295","            path: areaPath.clone(),","296","            series: series,","297","            seriesIndex: seriesIndex,","298","            chartRect: chartRect,","299","            index: seriesIndex,","300","            group: seriesGroups[seriesIndex],","301","            element: area","302","          });","303","        }.bind(this));"],"delete":["261","        \/\/ Clone original path and splice our new area path to add the missing path elements to close the area shape","262","        var areaPath = path.clone();","263","        \/\/ Modify line path and add missing elements for area","264","        areaPath.position(0)","265","          .remove(1)","266","          .move(chartRect.x1, areaBaseProjected)","267","          .line(pathCoordinates[0], pathCoordinates[1])","268","          .position(areaPath.pathElements.length)","269","          .line(pathCoordinates[pathCoordinates.length - 2], areaBaseProjected);","271","        \/\/ Create the new path for the area shape with the area class from the options","272","        var area = seriesGroups[seriesIndex].elem('path', {","273","          d: areaPath.stringify()","274","        }, options.classNames.area, true).attr({","275","          'values': normalizedData[seriesIndex]","276","        }, Chartist.xmlNs.uri);","278","        this.eventEmitter.emit('draw', {","279","          type: 'area',","280","          values: normalizedData[seriesIndex],","281","          path: areaPath.clone(),","282","          series: series,","283","          seriesIndex: seriesIndex,","284","          chartRect: chartRect,","285","          index: seriesIndex,","286","          group: seriesGroups[seriesIndex],","287","          element: area","288","        });"]}],"src\/scripts\/svg-path.js":[{"add":["308","   * @param {Boolean} [close] Optional option to set the new cloned path to closed. If not specified or false, the original path close option will be used.","311","  function clone(close) {","312","    var c = new Chartist.Svg.Path(close || this.close);","322","   * Split a Svg.Path object by a specific command in the path chain. The path chain will be split and an array of newly created paths objects will be returned. This is useful if you'd like to split an SVG path by it's move commands, for example, in order to isolate chunks of drawings.","323","   *","324","   * @memberof Chartist.Svg.Path","325","   * @param {String} command The command you'd like to use to split the path","326","   * @return {Array<Chartist.Svg.Path>}","327","   *\/","328","  function splitByCommand(command) {","329","    var split = [","330","      new Chartist.Svg.Path()","331","    ];","332","","333","    this.pathElements.forEach(function(pathElement) {","334","      if(pathElement.command === command.toUpperCase() && split[split.length - 1].pathElements.length !== 0) {","335","        split.push(new Chartist.Svg.Path());","336","      }","337","","338","      split[split.length - 1].pathElements.push(pathElement);","339","    });","340","","341","    return split;","342","  }","343","","344","  \/**","378","    clone: clone,","379","    splitByCommand: splitByCommand"],"delete":["310","  function clone() {","311","    var c = new Chartist.Svg.Path(this.close);","354","    clone: clone"]}],"test\/spec\/spec-svg.js":[{"add":["299","","300","    it('should split correctly by move command', function () {","301","      var paths = new Chartist.Svg.Path().parse('M0,0L0,0L0,0L0,0M0,0L0,0L0,0L0,0').splitByCommand('M');","302","      expect(paths).toHaveLength(2);","303","      expect(paths[0].pathElements[0].command).toBe('M');","304","      expect(paths[0].pathElements).toHaveLength(4);","305","      expect(paths[1].pathElements[0].command).toBe('M');","306","      expect(paths[1].pathElements).toHaveLength(4);","307","    });","308","","309","    it('should split correctly by move command and tailing move element', function () {","310","      var paths = new Chartist.Svg.Path().parse('M0,0L0,0L0,0L0,0M0,0L0,0L0,0L0,0M0,0').splitByCommand('M');","311","      expect(paths).toHaveLength(3);","312","      expect(paths[2].pathElements[0].command).toBe('M');","313","    });","314","","315","    it('should split correctly by move command and leading other commands', function () {","316","      var paths = new Chartist.Svg.Path().parse('L0,0C0,0,0,0,0,0M0,0L0,0L0,0L0,0M0,0L0,0L0,0L0,0').splitByCommand('M');","317","      expect(paths).toHaveLength(3);","318","      expect(paths[0].pathElements).toHaveLength(2);","319","      expect(paths[0].pathElements[0].command).toBe('L');","320","      expect(paths[0].pathElements[1].command).toBe('C');","321","","322","      expect(paths[1].pathElements).toHaveLength(4);","323","      expect(paths[1].pathElements[0].command).toBe('M');","324","    });"],"delete":[]}]}},"4c6111a6eff9175f422ec41a7baf4bf04a2de3e1":{"changes":{"\/dev\/null":"DELETE","source\/scripts\/site\/main.js":"MODIFY","source\/site\/examples\/behavior-with-jquery.js":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"source\/scripts\/site\/main.js":[{"add":["11","  \/\/ Remove any declaration of $chart as we are passing $chart to our function eval","12","  modified = modified.replace(\/var \\$chart.+;\/, '');","13",""],"delete":[]}],"source\/site\/examples\/behavior-with-jquery.js":[{"add":["18","var $chart = $('.ct-chart');","19",""],"delete":["18","\/\/ $chart is set to a jQuery wrapper around the chart container div"]}]}},"ac73cedccfc3406c8667d0652dcadc5457c1935d":{"changes":{"source\/styles\/_modules.scss":"MODIFY","\/dev\/null":"DELETE","source\/styles\/site\/_modules.scss":"ADD","source\/styles\/site\/modules\/_font.scss":"ADD","source\/styles\/site\/modules\/_icon.scss":"ADD","source\/styles\/site\/main.scss":"MODIFY"},"diff":{"source\/styles\/_modules.scss":[{"add":[],"delete":["3","@import \"modules\/font\";","4","@import \"modules\/icon\";"]}],"\/dev\/null":[{"add":[],"delete":[]}],"source\/styles\/site\/_modules.scss":[{"add":[],"delete":[]}],"source\/styles\/site\/modules\/_font.scss":[{"add":[],"delete":[]}],"source\/styles\/site\/modules\/_icon.scss":[{"add":[],"delete":[]}],"source\/styles\/site\/main.scss":[{"add":["2","","6","","7","@import \"modules\";","8","","11",""],"delete":[]}]}},"6076b7df0ae30268f40eb720e0ed0bf529b8cc43":{"changes":{"test\/spec\/spec-pie-chart.js":"MODIFY","src\/scripts\/charts\/pie.js":"MODIFY"},"diff":{"test\/spec\/spec-pie-chart.js":[{"add":["73","        expect(slices.eq(0).attr('ct:value')).toBe('5');","75","        expect(slices.eq(2).attr('ct:value')).toBe('4');","112","        expect(slice1.attr('d')).toMatch(\/^M50,90A40,40,0,0,0,50,10L50,50Z\/);","113","        expect(slice2.attr('d')).toMatch(\/^M50,10A40,40,0,0,0,50.\\d+,90L50,50Z\/);","123","        var slice1 = $('.ct-slice-pie').eq(1);","173","        chartPadding: 0","188","        expect(slice1.attr('d')).toMatch(\/^M50.1\\d+,0A50,50,0,0,0,50,0\/);","189","        expect(slice2.attr('d')).toMatch(\/^M49.9\\d*,0A50,50,0,1,0,50,0\/);","200","        expect(slice1.attr('d')).toMatch(\/^M100,50.1\\d*A50,50,0,0,0,100,50\/);","201","        expect(slice2.attr('d')).toMatch(\/^M100,49.97\\d*A50,50,0,1,0,100,49.98\\d*\/);","212","        expect(slice1.attr('d')).toMatch(\/^M50.\\d+,30A20,20,0,0,0,50,30\/);","213","        expect(slice2.attr('d')).toMatch(\/^M49.9\\d*,30A20,20,0,1,0,50,30\/);","246","        expect(slices.eq(0).attr('ct:value')).toBe('1');","248","        expect(slices.eq(2).attr('ct:value')).toBe('4');","276","        expect(slices.eq(1).attr('ct:value')).toBe('0');","277","        expect(slices.eq(2).attr('ct:value')).toBe('0');","280","        expect(slices.eq(1).attr('d')).toBe('M200,5A118.609,118.609,0,0,0,200,5L200,123.609Z');","281","        expect(slices.eq(2).attr('d')).toBe('M200,5A118.609,118.609,0,0,0,200,5L200,123.609Z');","313","        expect(slices.eq(0).attr('ct:value')).toBe('1');","314","        expect(slices.eq(1).attr('ct:value')).toBe('2');","315","        expect(slices.eq(2).attr('ct:value')).toBe('0');","316","        expect(slices.eq(3).attr('ct:value')).toBe('4');","354","        expect(slices.eq(0).attr('ct:value')).toBe('20');","355","        expect(slices.eq(1).attr('ct:value')).toBe('10');","356","        expect(slices.eq(2).attr('ct:value')).toBe('30');","357","        expect(slices.eq(3).attr('ct:value')).toBe('40');"],"delete":["73","        expect(slices.eq(2).attr('ct:value')).toBe('5');","75","        expect(slices.eq(0).attr('ct:value')).toBe('4');","112","        expect(slice1.attr('d')).toMatch(\/^M50,10A40,40,0,0,0,50.\\d+,90L50,50Z\/);","113","        expect(slice2.attr('d')).toMatch(\/^M50,90A40,40,0,0,0,50,10L50,50Z\/);","123","        var slice1 = $('.ct-slice-pie').eq(0);","173","        chartPadding: 0,","188","        expect(slice1.attr('d')).toMatch(\/^M49.9\\d*,0A50,50,0,1,0,50,0\/);","189","        expect(slice2.attr('d')).toMatch(\/^M50.1\\d+,0A50,50,0,0,0,50,0\/);","200","        expect(slice1.attr('d')).toMatch(\/^M100,49.97\\d*A50,50,0,1,0,100,49.98\\d*\/);","201","        expect(slice2.attr('d')).toMatch(\/^M100,50.1\\d*A50,50,0,0,0,100,50\/);","212","        expect(slice1.attr('d')).toMatch(\/^M49.9\\d*,30A20,20,0,1,0,50,30\/);","213","        expect(slice2.attr('d')).toMatch(\/^M50.\\d+,30A20,20,0,0,0,50,30\/);","246","        expect(slices.eq(2).attr('ct:value')).toBe('1');","248","        expect(slices.eq(0).attr('ct:value')).toBe('4');","275","        expect(slices.eq(2).attr('ct:value')).toBe('0');","276","        expect(slices.eq(1).attr('ct:value')).toBe('0');","279","        expect(slices.eq(2).attr('d')).toBe('M200,5A118.609,118.609,0,0,0,200,5L200,123.609Z');","280","        expect(slices.eq(1).attr('d')).toBe('M200,5A118.609,118.609,0,0,0,200,5L200,123.609Z');","313","        expect(slices.eq(3).attr('ct:value')).toBe('1');","314","        expect(slices.eq(2).attr('ct:value')).toBe('2');","315","        expect(slices.eq(1).attr('ct:value')).toBe('0');","316","        expect(slices.eq(0).attr('ct:value')).toBe('4');","354","        expect(slices.eq(3).attr('ct:value')).toBe('20');","355","        expect(slices.eq(2).attr('ct:value')).toBe('10');","356","        expect(slices.eq(1).attr('ct:value')).toBe('30');","357","        expect(slices.eq(0).attr('ct:value')).toBe('40');"]}],"src\/scripts\/charts\/pie.js":[{"add":["139","    \/\/ Creating the series groups","140","    data.raw.series.forEach(function(series, index) {","141","      seriesGroups[index] = this.svg.elem('g', null, null);","142","    }.bind(this));","145","      labelsGroup = this.svg.elem('g', null, null);","150","    data.raw.series.forEach(function(series, index) {","152","      if (data.normalized.series[index] === 0 && options.ignoreEmptyValues) return;","155","      seriesGroups[index].attr({","160","      seriesGroups[index].addClass([","162","        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(index))","166","      var endAngle = (totalDataSum > 0 ? startAngle + data.normalized.series[index] \/ totalDataSum * 360 : 0);","169","      var overlappigStartAngle = Math.max(0, startAngle - (index === 0 || hasSingleValInSeries ? 0 : 0.2));","192","      var pathElement = seriesGroups[index].elem('path', {","198","        'ct:value': data.normalized.series[index],","212","        value: data.normalized.series[index],","214","        index: index,","217","        group: seriesGroups[index],","237","        if(data.normalized.labels && !Chartist.isFalseyButZero(data.normalized.labels[index])) {","238","          rawValue = data.normalized.labels[index];","240","          rawValue = data.normalized.series[index];","243","        var interpolatedValue = options.labelInterpolationFnc(rawValue, index);","255","            index: index,","268","    }.bind(this));"],"delete":["141","      labelsGroup = this.svg.elem('g', null, null, true);","146","    for (var i = 0; i < data.raw.series.length; i++) {","148","      if (data.normalized.series[i] === 0 && options.ignoreEmptyValues) continue;","149","","150","      var series = data.raw.series[i];","151","      seriesGroups[i] = this.svg.elem('g', null, null, true);","154","      seriesGroups[i].attr({","159","      seriesGroups[i].addClass([","161","        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(i))","165","      var endAngle = (totalDataSum > 0 ? startAngle + data.normalized.series[i] \/ totalDataSum * 360 : 0);","168","      var overlappigStartAngle = Math.max(0, startAngle - (i === 0 || hasSingleValInSeries ? 0 : 0.2));","191","      var pathElement = seriesGroups[i].elem('path', {","197","        'ct:value': data.normalized.series[i],","211","        value: data.normalized.series[i],","213","        index: i,","216","        group: seriesGroups[i],","236","        if(data.normalized.labels && !Chartist.isFalseyButZero(data.normalized.labels[i])) {","237","          rawValue = data.normalized.labels[i];","239","          rawValue = data.normalized.series[i];","242","        var interpolatedValue = options.labelInterpolationFnc(rawValue, i);","254","            index: i,","267","    }"]}]}},"26cbdeccaf78b0d987c46bd674f2313ced54d279":{"changes":{"src\/scripts\/axes\/fixed-scale-axis.js":"MODIFY","test\/spec\/spec-axes.js":"ADD"},"diff":{"src\/scripts\/axes\/fixed-scale-axis.js":[{"add":["29","    this.ticks.sort(function(a, b) {","30","      return a - b;","31","    });"],"delete":[]}],"test\/spec\/spec-axes.js":[{"add":[],"delete":[]}]}},"0219e75de28e4ab80a9ec8bbb602607575877c60":{"changes":{"source\/scripts\/chartist.core.js":"MODIFY"},"diff":{"source\/scripts\/chartist.core.js":[{"add":["118","    width = width || '100%';","119","    height = height || '100%';","120","","124","        width: width,","125","        height: height","126","      }).removeAllClasses().addClass(className).attr({","127","        style: 'width: ' + width + '; height: ' + height + ';'","128","      });","135","        width: width,","136","        height: height","137","      }).addClass(className).attr({","138","        style: 'width: ' + width + '; height: ' + height + ';'","139","      });"],"delete":["121","        width: width || '100%',","122","        height: height || '100%'","123","      }).removeAllClasses().addClass(className);","130","        width: width || '100%',","131","        height: height || '100%'","132","      }).addClass(className);"]}]}},"fa7c70b56a0d44baa1528fc3500357151ed13613":{"changes":{"src\/scripts\/charts\/pie.js":"MODIFY"},"diff":{"src\/scripts\/charts\/pie.js":[{"add":["115","      return val.hasOwnProperty('value') ? val.value !== 0 : val !== 0;"],"delete":["115","      return val !== 0;"]}]}},"a240fad16e590256b90830874cb722a0e08f9962":{"changes":{"test\/spec\/spec-pie-chart.js":"ADD","src\/scripts\/charts\/pie.js":"MODIFY"},"diff":{"test\/spec\/spec-pie-chart.js":[{"add":[],"delete":[]}],"src\/scripts\/charts\/pie.js":[{"add":["125","        'series-name': this.data.series[i].name","162","        'value': dataArray[i],","163","        'meta': Chartist.serialize(this.data.series[i].meta)"],"delete":["125","        'series-name': this.data.series[i].name,","126","        'meta': Chartist.serialize(this.data.series[i].meta)","163","        'value': dataArray[i]"]}]}},"aae01027604617faabf01cf8dc893b2d4562b803":{"changes":{"src\/scripts\/axes\/axis.js":"MODIFY","test\/spec\/spec-line-chart.js":"MODIFY"},"diff":{"src\/scripts\/axes\/axis.js":[{"add":["99","          (axisOptions.position === 'start' ? chartOptions.classNames[axisOptions.position] : chartOptions.classNames['end'])"],"delete":["99","          chartOptions.classNames[axisOptions.position]"]}],"test\/spec\/spec-line-chart.js":[{"add":["75","  describe('AxisY position tests', function() {","76","    var options;","77","    var data;","78","","79","    beforeEach(function() {","80","      data = {","81","        series: [[","82","          { x: 1, y: 1 },","83","          { x: 3, y: 5 }","84","        ]]","85","      };","86","      options =  {};","87","    });","88","","89","    function onCreated(callback) {","90","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","91","      var chart = new Chartist.Line('.ct-chart', data, options);","92","      chart.on('created', callback);","93","    }","94","","95","    it('class should be ct-start if position start', function(done) {","96","      options = {","97","        axisY: {","98","          position: 'start'","99","        }","100","      }","101","      onCreated(function() {","102","          $('.ct-label.ct-vertical').each(function() {","103","            expect($(this).attr('class')).toBe('ct-label ct-vertical ct-start');","104","          });","105","          done();","106","        });","107","      });","108","","109","    it('class should be ct-end if position is any other value than start', function(done) {","110","      options = {","111","        axisY: {","112","          position: 'right'","113","        }","114","      }      ","115","      onCreated(function() {","116","        $('.ct-label.ct-vertical').each(function() {","117","          expect($(this).attr('class')).toBe('ct-label ct-vertical ct-end');","118","        });","119","        done();","120","      });","121","    });","122","  });"],"delete":[]}]}},"c65a6636a0ff376552a33e3d222b82bdbebeb269":{"changes":{"src\/scripts\/charts\/line.js":"MODIFY","src\/scripts\/charts\/bar.js":"MODIFY"},"diff":{"src\/scripts\/charts\/line.js":[{"add":["207","            'value': [pathElement.data.value.x, pathElement.data.value.y].filter(function(v) {","208","                return v;","209","              }).join(','),"],"delete":["207","            'value': pathElement.data.value.x === undefined ? pathElement.data.value.y : pathElement.data.value.x + ',' + pathElement.data.value.y,"]}],"src\/scripts\/charts\/bar.js":[{"add":["332","        \/\/ For flipped axis we need to normalize the value X and Y values","333","        ;","334","","337","          'value': [value.x, value.y].filter(function(v) {","338","            return v;","339","          }).join(','),"],"delete":["334","          'value': value.x === undefined ? value.y : value.x + ',' + value.y,"]}]}},"3152087a58a81864a2ae466b0b63f89d0a8f2a7a":{"changes":{"src\/scripts\/base.js":"MODIFY"},"diff":{"src\/scripts\/base.js":[{"add":["97","    \/\/ Event for data transformation that allows to manipulate the data before it gets rendered in the charts","98","    this.eventEmitter.emit('data', {","99","      type: 'initial',","100","      data: this.data","101","    });","102",""],"delete":["126","    \/\/ Event for data transformation that allows to manipulate the data before it gets rendered in the charts","127","    this.eventEmitter.emit('data', {","128","      type: 'initial',","129","      data: this.data","130","    });","131",""]}]}},"f606c144682d74284b2a65bef4749907a95b95a1":{"changes":{"source\/scripts\/chartist.core.js":"MODIFY"},"diff":{"source\/scripts\/chartist.core.js":[{"add":["139","","140","      \/\/ Convert values to number","141","      for (var j = 0; j < array[i].length; j++) {","142","        array[i][j] = +array[i][j];","143","      }"],"delete":[]}]}},"e5e3a2f7a5303267c789b1d9285590494410ac96":{"changes":{"src\/scripts\/charts\/bar.js":"MODIFY"},"diff":{"src\/scripts\/charts\/bar.js":[{"add":[],"delete":["67","    \/\/ Use only integer values (whole numbers) for the scale steps","68","    onlyInteger: false,"]}]}},"f74f60c03acc09c7e98b46c97392221edcf50c9f":{"changes":{"src\/scripts\/core.js":"MODIFY","src\/scripts\/charts\/line.js":"MODIFY","src\/scripts\/charts\/bar.js":"MODIFY"},"diff":{"src\/scripts\/core.js":[{"add":["498","    return value ? value.meta : undefined;"],"delete":["498","    return value ? Chartist.serialize(value.meta) : undefined;"]}],"src\/scripts\/charts\/line.js":[{"add":["216","            'ct:meta': Chartist.serialize(pathElement.data.meta)","249","          seriesMeta: series.meta,"],"delete":["216","            'ct:meta': pathElement.data.meta"]}],"src\/scripts\/charts\/bar.js":[{"add":["351","        ","352","        var metaData = Chartist.getMetaData(series, valueIndex);","357","          'ct:meta': Chartist.serialize(metaData)","364","          meta: metaData,"],"delete":["355","          'ct:meta': Chartist.getMetaData(series, valueIndex)","362","          meta: Chartist.getMetaData(series, valueIndex),"]}]}},"851d696b314ccb0a26498fc690a1206e1dde32e6":{"changes":{"src\/scripts\/charts\/line.js":"MODIFY","src\/scripts\/axes\/fixed-scale-axis.js":"MODIFY","src\/scripts\/axes\/auto-scale-axis.js":"MODIFY"},"diff":{"src\/scripts\/charts\/line.js":[{"add":["244","      \/\/ Area currently only works with axes that support a range!","245","      if(seriesOptions.showArea && axisY.range) {","246","        \/\/ If areaBase is outside the chart area (< min or > max) we need to set it respectively so that","248","        var areaBase = Math.max(Math.min(seriesOptions.areaBase, axisY.range.max), axisY.range.min);"],"delete":["244","      \/\/ Area currently only works with axes that support highLow!","245","      if(seriesOptions.showArea && axisY.highLow) {","246","        \/\/ If areaBase is outside the chart area (< low or > high) we need to set it respectively so that","248","        var areaBase = Math.max(Math.min(seriesOptions.areaBase, axisY.highLow.high), axisY.highLow.low);"]}],"src\/scripts\/axes\/fixed-scale-axis.js":[{"add":["24","    var highLow = Chartist.getHighLow(data.normalized, options, axisUnit.pos);","27","      return highLow.low + (highLow.high - highLow.low) \/ this.divisor * index;","29","    this.range = {","30","      min: highLow.low,","31","      max: highLow.high","32","    };","44","    return this.axisLength * (+Chartist.getMultiValue(value, this.units.pos) - this.range.min) \/ (this.range.max - this.range.min);"],"delete":["24","    this.highLow = Chartist.getHighLow(data.normalized, options, axisUnit.pos);","27","      return this.highLow.low + (this.highLow.high - this.highLow.low) \/ this.divisor * index;","40","    return this.axisLength * (+Chartist.getMultiValue(value, this.units.pos) - this.highLow.low) \/ (this.highLow.high - this.highLow.low);"]}],"src\/scripts\/axes\/auto-scale-axis.js":[{"add":["27","    var highLow = options.highLow || Chartist.getHighLow(data.normalized, options, axisUnit.pos);","28","    this.bounds = Chartist.getBounds(chartRect[axisUnit.rectEnd] - chartRect[axisUnit.rectStart], highLow, options.scaleMinSpace || 20, options.referenceValue, options.onlyInteger);","29","    this.range = {","30","      min: this.bounds.min,","31","      max: this.bounds.max","32","    };"],"delete":["27","    this.highLow = options.highLow || Chartist.getHighLow(data.normalized, options, axisUnit.pos);","28","    this.bounds = Chartist.getBounds(chartRect[axisUnit.rectEnd] - chartRect[axisUnit.rectStart], this.highLow, options.scaleMinSpace || 20, options.referenceValue, options.onlyInteger);"]}]}},"0d66139b6e7b334f120c2e0590c3cf5b1a8882ec":{"changes":{"src\/scripts\/core.js":"MODIFY"},"diff":{"src\/scripts\/core.js":[{"add":["478","    if(num === 1) {","479","      return num;","480","    }","481",""],"delete":[]}]}},"271fa38180b0db5aa2f21f552d113bbeeedb9da9":{"changes":{"src\/scripts\/svg.js":"MODIFY"},"diff":{"src\/scripts\/svg.js":[{"add":["110","   * @memberof Chartist.Svg","120","   * @memberof Chartist.Svg","134","   * @memberof Chartist.Svg","146","   * @memberof Chartist.Svg"],"delete":[]}]}},"38ab68f1309a90cd418cc595f557409b2bade5c4":{"changes":{"src\/scripts\/core.js":"MODIFY","src\/scripts\/axes\/axis.js":"MODIFY","test\/spec\/spec-line-chart.js":"MODIFY","src\/scripts\/charts\/line.js":"MODIFY","src\/scripts\/charts\/bar.js":"MODIFY","src\/scripts\/charts\/pie.js":"MODIFY","test\/spec\/spec-bar-chart.js":"MODIFY"},"diff":{"src\/scripts\/core.js":[{"add":["311","  \/**","312","   * Ensures that the data object passed as second argument to the charts is present and correctly initialized.","313","   *","314","   * @param  {Object} data The data object that is passed as second argument to the charts","315","   * @return {Object} The normalized data object","316","   *\/","317","  Chartist.normalizeData = function(data) {","318","    \/\/ Ensure data is present otherwise enforce","319","    data = data || {series: [], labels: []};","320","    data.series = data.series || [];","321","    data.labels = data.labels || [];","322","","323","    \/\/ Check if we should generate some labels based on existing series data","324","    if (data.series.length > 0 && data.labels.length === 0) {","325","      var normalized = Chartist.getDataArray(data),","326","          labelCount;","327","","328","      \/\/ If all elements of the normalized data array are arrays we're dealing with","329","      \/\/ data from Bar or Line charts and we need to find the largest series if they are un-even","330","      if (normalized.every(function(value) {","331","        return value instanceof Array;","332","      })) {","333","        \/\/ Getting the series with the the most elements","334","        labelCount = Math.max.apply(null, normalized.map(function(series) {","335","          return series.length;","336","        }));","337","      } else {","338","        \/\/ We're dealing with Pie data so we just take the normalized array length","339","        labelCount = normalized.length;","340","      }","341","","342","      \/\/ Setting labels to an array with emptry strings using our labelCount estimated above","343","      data.labels = Chartist.times(labelCount).map(function() {","344","        return '';","345","      });","346","    }","347","    return data;","348","  };","556","        highLow.high = 1;","557","        highLow.low = 0;"],"delete":["518","        highLow.high = highLow.low = 0;"]}],"src\/scripts\/axes\/axis.js":[{"add":["58","      if(!Chartist.isFalseyButZero(labelValues[index]) && !labelValues[index] === '') {"],"delete":["58","      if(!labelValues[index] && labelValues[index] !== 0) {"]}],"test\/spec\/spec-line-chart.js":[{"add":["315","","316","  describe('Empty data tests', function () {","317","    it('should render empty grid with no data', function (done) {","318","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","319","","320","      var chart = new Chartist.Line('.ct-chart');","321","","322","      chart.on('created', function () {","323","        \/\/ Find at least one vertical grid line","324","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","325","        done();","326","      });","327","    });","328","","329","    it('should render empty grid with only labels', function (done) {","330","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","331","","332","      var data = {","333","        labels: [1, 2, 3, 4]","334","      };","335","      var chart = new Chartist.Line('.ct-chart', data);","336","","337","      chart.on('created', function () {","338","        \/\/ Find at least one vertical grid line","339","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","340","        \/\/ Find exactly as many horizontal grid lines as labels were specified (Step Axis)","341","        expect(document.querySelectorAll('.ct-grids .ct-grid.ct-horizontal').length).toBe(data.labels.length);","342","        done();","343","      });","344","    });","345","","346","    it('should generate labels and render empty grid with only series in data', function (done) {","347","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","348","","349","      var data = {","350","        series:  [","351","          [1, 2, 3, 4],","352","          [2, 3, 4],","353","          [3, 4]","354","        ]","355","      };","356","      var chart = new Chartist.Line('.ct-chart', data);","357","","358","      chart.on('created', function () {","359","        \/\/ Find at least one vertical grid line","360","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","361","        \/\/ Should generate the labels using the largest series count","362","        expect(document.querySelectorAll('.ct-grids .ct-grid.ct-horizontal').length).toBe(Math.max.apply(null, data.series.map(function(series) {","363","          return series.length;","364","        })));","365","        done();","366","      });","367","    });","368","","369","    it('should render empty grid with no data and specified high low', function (done) {","370","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","371","","372","      var chart = new Chartist.Line('.ct-chart', null, {","373","        width: 400,","374","        height: 300,","375","        high: 100,","376","        low: -100","377","      });","378","","379","      chart.on('created', function () {","380","        \/\/ Find first and last label","381","        var labels = document.querySelectorAll('.ct-labels .ct-label.ct-vertical');","382","        var firstLabel = labels[0];","383","        var lastLabel = labels[labels.length - 1];","384","","385","        expect(firstLabel.textContent).toBe('-100');","386","        expect(lastLabel.textContent).toBe('100');","387","        done();","388","      });","389","    });","390","","391","    it('should render empty grid with no data and reverseData option', function (done) {","392","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","393","","394","      var chart = new Chartist.Line('.ct-chart', null, {","395","        reverseData: true","396","      });","397","","398","      chart.on('created', function () {","399","        \/\/ Find at least one vertical grid line","400","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","401","        done();","402","      });","403","    });","404","  });"],"delete":[]}],"src\/scripts\/charts\/line.js":[{"add":["113","    this.data = Chartist.normalizeData(this.data);"],"delete":[]}],"src\/scripts\/charts\/bar.js":[{"add":["109","    this.data = Chartist.normalizeData(this.data);","132","    if(options.stackBars && data.normalized.length !== 0) {"],"delete":["131","    if(options.stackBars) {"]}],"src\/scripts\/charts\/pie.js":[{"add":["83","    this.data = Chartist.normalizeData(this.data);","169","","229","          interpolatedValue = options.labelInterpolationFnc(this.data.labels && !Chartist.isFalseyButZero(this.data.labels[i]) ? this.data.labels[i] : dataArray[i], i);"],"delete":["168","      ","228","          interpolatedValue = options.labelInterpolationFnc(this.data.labels ? this.data.labels[i] : dataArray[i], i);"]}],"test\/spec\/spec-bar-chart.js":[{"add":["143","","144","  describe('Empty data tests', function () {","145","    it('should render empty grid with no data', function (done) {","146","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","147","","148","      var chart = new Chartist.Bar('.ct-chart');","149","","150","      chart.on('created', function () {","151","        \/\/ Find at least one vertical grid line","152","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","153","        done();","154","      });","155","    });","156","","157","    it('should render empty grid with only labels', function (done) {","158","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","159","","160","      var data = {","161","        labels: [1, 2, 3, 4]","162","      };","163","      var chart = new Chartist.Bar('.ct-chart', data);","164","","165","      chart.on('created', function () {","166","        \/\/ Find at least one vertical grid line","167","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","168","        \/\/ Find exactly as many horizontal grid lines as labels were specified (Step Axis)","169","        expect(document.querySelectorAll('.ct-grids .ct-grid.ct-horizontal').length).toBe(data.labels.length);","170","        done();","171","      });","172","    });","173","","174","    it('should generate labels and render empty grid with only series in data', function (done) {","175","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","176","","177","      var data = {","178","        series:  [","179","          [1, 2, 3, 4],","180","          [2, 3, 4],","181","          [3, 4]","182","        ]","183","      };","184","      var chart = new Chartist.Bar('.ct-chart', data);","185","","186","      chart.on('created', function () {","187","        \/\/ Find at least one vertical grid line","188","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","189","        \/\/ Should generate the labels using the largest series count","190","        expect(document.querySelectorAll('.ct-grids .ct-grid.ct-horizontal').length).toBe(Math.max.apply(null, data.series.map(function(series) {","191","          return series.length;","192","        })));","193","        done();","194","      });","195","    });","196","","197","    it('should render empty grid with no data and specified high low', function (done) {","198","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","199","","200","      var chart = new Chartist.Bar('.ct-chart', null, {","201","        width: 400,","202","        height: 300,","203","        high: 100,","204","        low: -100","205","      });","206","","207","      chart.on('created', function () {","208","        \/\/ Find first and last label","209","        var labels = document.querySelectorAll('.ct-labels .ct-label.ct-vertical');","210","        var firstLabel = labels[0];","211","        var lastLabel = labels[labels.length - 1];","212","","213","        expect(firstLabel.textContent).toBe('-100');","214","        expect(lastLabel.textContent).toBe('100');","215","        done();","216","      });","217","    });","218","","219","    it('should render empty grid with no data and reverseData option', function (done) {","220","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","221","","222","      var chart = new Chartist.Bar('.ct-chart', null, {","223","        reverseData: true","224","      });","225","","226","      chart.on('created', function () {","227","        \/\/ Find at least one vertical grid line","228","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","229","        done();","230","      });","231","    });","232","","233","    it('should render empty grid with no data and stackBars option', function (done) {","234","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","235","","236","      var chart = new Chartist.Bar('.ct-chart', null, {","237","        stackBars: true","238","      });","239","","240","      chart.on('created', function () {","241","        \/\/ Find at least one vertical grid line","242","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","243","        done();","244","      });","245","    });","246","","247","    it('should render empty grid with no data and horizontalBars option', function (done) {","248","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","249","","250","      var chart = new Chartist.Bar('.ct-chart', null, {","251","        horizontalBars: true","252","      });","253","","254","      chart.on('created', function () {","255","        \/\/ Find at least one vertical grid line","256","        \/\/ TODO: In theory the axis should be created with ct-horizontal class","257","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","258","        done();","259","      });","260","    });","261","","262","    it('should render empty grid with no data and distributeSeries option', function (done) {","263","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","264","","265","      var chart = new Chartist.Bar('.ct-chart', null, {","266","        distributeSeries: true","267","      });","268","","269","      chart.on('created', function () {","270","        \/\/ Find at least one vertical grid line","271","        expect(document.querySelector('.ct-grids .ct-grid.ct-vertical')).toBeDefined();","272","        done();","273","      });","274","    });","275","  });"],"delete":[]}]}},"6d16f02e648d00f159008d52176cf3c33372650a":{"changes":{"test\/spec\/spec-pie-chart.js":"MODIFY","src\/scripts\/charts\/pie.js":"MODIFY"},"diff":{"test\/spec\/spec-pie-chart.js":[{"add":["254","  describe('Pie with empty values', function() {","255","    var data;","256","","257","    beforeEach(function() {","258","      data = {","259","        series: [0, 0, 0]","260","      };","261","    });","262","","263","    function onCreated(callback) {","264","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","265","      var chart = new Chartist.Pie('.ct-chart', data, {});","266","      chart.on('created', callback);","267","    }","268","","269","    it('Pie should render without NaN values and points', function(done) {","270","      onCreated(function() {","271","        var slices = $('.ct-slice-pie');","272","","273","        expect(slices.length).toBe(3);","274","","275","        expect(slices.eq(2).attr('ct:value')).toBe('0');","276","        expect(slices.eq(1).attr('ct:value')).toBe('0');","277","        expect(slices.eq(0).attr('ct:value')).toBe('0');","278","","279","        expect(slices.eq(2).attr('d')).toBe('M200,5A118.609,118.609,0,0,0,200,5L200,123.609Z');","280","        expect(slices.eq(1).attr('d')).toBe('M200,5A118.609,118.609,0,0,0,200,5L200,123.609Z');","281","        expect(slices.eq(0).attr('d')).toBe('M200,5A118.609,118.609,0,0,0,200,5L200,123.609Z');","282","        done();","283","      });","284","    });","285","  });","286",""],"delete":[]}],"src\/scripts\/charts\/pie.js":[{"add":["165","      \/\/ If the whole dataset is 0 endAngle should be zero. Can't divide by 0.","166","      var endAngle = (totalDataSum > 0 ? startAngle + dataArray[i] \/ totalDataSum * 360 : 0);"],"delete":["165","      var endAngle = startAngle + dataArray[i] \/ totalDataSum * 360;"]}]}},"e927adfdf9e973a0a7610b1b6692fb2933d7cb9d":{"changes":{"src\/scripts\/core.js":"MODIFY","test\/spec\/spec-core.js":"MODIFY"},"diff":{"src\/scripts\/core.js":[{"add":["316","        value = value.value === 0 ? 0 : (value.value || value);"],"delete":["313","","317","        value = value.value || value;"]}],"test\/spec\/spec-core.js":[{"add":["84","","85","  describe('data normalization tests', function () {","86","    it('should normalize based on label length', function() {","87","      var data = {","88","        labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],","89","        series: [","90","          [1, 2, 3, 4, 5, 6],","91","          [1, 2, 3, 4, 5, 6, 7, 8],","92","          [1, 2, 3]","93","        ]","94","      };","95","","96","      expect(Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length)).toEqual(","97","        [","98","          [1, 2, 3, 4, 5, 6, 0, 0, 0, 0],","99","          [1, 2, 3, 4, 5, 6, 7, 8, 0, 0],","100","          [1, 2, 3, 0, 0, 0, 0, 0, 0, 0]","101","        ]","102","      );","103","    });","104","","105","    it('normalize mixed series types correctly', function() {","106","      var data = {","107","        labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],","108","        series: [","109","          {data: [1, 0, 3, 4, 5, 6]},","110","          [1, {value: 0}, 3, {value: 4}, 5, 6, 7, 8],","111","          {data: [1, 0, {value: 3}]}","112","        ]","113","      };","114","","115","      expect(Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length)).toEqual(","116","        [","117","          [1, 0, 3, 4, 5, 6, 0, 0, 0, 0],","118","          [1, 0, 3, 4, 5, 6, 7, 8, 0, 0],","119","          [1, 0, 3, 0, 0, 0, 0, 0, 0, 0]","120","        ]","121","      );","122","    });","123","","124","    it('should normalize correctly with 0 values in data series array objects', function() {","125","      var data = {","126","        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],","127","        series: [{","128","          data: [","129","            { value: 1 },","130","            { value: 4 },","131","            { value: 2 },","132","            { value: 7 },","133","            { value: 2 },","134","            { value: 0 }","135","          ]","136","        }]","137","      };","138","","139","      expect(Chartist.normalizeDataArray(Chartist.getDataArray(data))).toEqual(","140","        [[1, 4, 2, 7, 2, 0]]","141","      );","142","    });","143","  });"],"delete":[]}]}},"3f5e1e56410e37546660885d7ba093ff31ca0826":{"changes":{"src\/scripts\/core.js":"MODIFY","test\/spec\/spec-line-chart.js":"MODIFY","src\/scripts\/charts\/line.js":"MODIFY","src\/scripts\/charts\/bar.js":"MODIFY","test\/spec\/spec-bar-chart.js":"ADD"},"diff":{"src\/scripts\/core.js":[{"add":["319","  Chartist.getMetaData = function(series, index) {","320","    var value = series.data ? series.data[index] : series[index];","321","    return value ? Chartist.serialize(value.meta) : undefined;","322","  };","323",""],"delete":[]}],"test\/spec\/spec-line-chart.js":[{"add":["11","  describe('Meta data tests', function () {","12","    it('should render meta data correctly with mixed value array', function(done) {","13","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","14","","15","      var meta = {","16","        test: 'Serialized Test'","17","      };","18","","19","      var data = {","20","        labels: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu'],","21","        series: [","22","          [5, 2, 4, {","23","            value: 2,","24","            meta: meta","25","          }, 0]","26","        ]","27","      };","28","","29","      var chart = new Chartist.Line('.ct-chart', data);","30","","31","      chart.on('created', function() {","32","        expect(Chartist.deserialize($('.ct-point').eq(3).attr('ct:meta'))).toEqual(meta);","33","        done();","34","      });","35","    });","36","","37","    it('should render meta data correctly with mixed value array and different normalized data length', function(done) {","38","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","39","","40","      var meta = {","41","        test: 'Serialized Test'","42","      };","43","","44","      var data = {","45","        labels: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],","46","        series: [","47","          [5, 2, 4, {","48","            value: 2,","49","            meta: meta","50","          }, 0]","51","        ]","52","      };","53","","54","      var chart = new Chartist.Line('.ct-chart', data);","55","","56","      chart.on('created', function() {","57","        expect(Chartist.deserialize($('.ct-point').eq(3).attr('ct:meta'))).toEqual(meta);","58","        done();","59","      });","60","    });","61","","62","    it('should render meta data correctly with mixed value array and mixed series notation', function(done) {","63","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","64","","65","      var seriesMeta = 9999,","66","        valueMeta = {","67","          test: 'Serialized Test'","68","        };","69","","70","      var data = {","71","        labels: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],","72","        series: [","73","          [5, 2, 4, {","74","            value: 2,","75","            meta: valueMeta","76","          }, 0],","77","          {","78","            meta: seriesMeta,","79","            data: [5, 2, {","80","              value: 2,","81","              meta: valueMeta","82","            }, 0]","83","          }","84","        ]","85","      };","86","","87","      var chart = new Chartist.Line('.ct-chart', data);","88","","89","      chart.on('created', function() {","90","        expect(Chartist.deserialize($('.ct-series-a .ct-point').eq(3).attr('ct:meta'))).toEqual(valueMeta);","91","        expect(Chartist.deserialize($('.ct-series-b')).attr('ct:meta')).toEqual(''+seriesMeta);","92","        expect(Chartist.deserialize($('.ct-series-b .ct-point').eq(2).attr('ct:meta'))).toEqual(valueMeta);","93","        done();","94","      });","95","    });","97","});"],"delete":["0","\/\/TODO: Add tests!","12","  it('should not give an error because we have 0% test coverage ;-)', function() {","13","    expect(true).toBe(true);","15","});"]}],"src\/scripts\/charts\/line.js":[{"add":["202","            'meta': Chartist.getMetaData(series, valueIndex)"],"delete":["202","            'meta': series.data ?","203","              Chartist.serialize(series.data[valueIndex].meta) :","204","              Chartist.serialize(series[valueIndex].meta)"]}],"src\/scripts\/charts\/bar.js":[{"add":["225","          'meta': Chartist.getMetaData(series, valueIndex)"],"delete":["225","          'meta': series.data ?","226","            Chartist.serialize(series.data[valueIndex].meta) :","227","            Chartist.serialize(series[valueIndex].meta)"]}],"test\/spec\/spec-bar-chart.js":[{"add":[],"delete":[]}]}},"19575b97316108476848626963bd05383a8f7cf0":{"changes":{"site\/templates\/test.hbs":"ADD","src\/scripts\/charts\/bar.js":"MODIFY"},"diff":{"site\/templates\/test.hbs":[{"add":[],"delete":[]}],"src\/scripts\/charts\/bar.js":[{"add":["287","            x: chartRect.x1 + valueAxis.projectValue(value && value.x ? value.x : 0, valueIndex, data.normalized[seriesIndex]),","288","            y: chartRect.y1 - labelAxis.projectValue(value && value.y ? value.y : 0, labelAxisValueIndex, data.normalized[seriesIndex])","292","            x: chartRect.x1 + labelAxis.projectValue(value && value.x ? value.x : 0, labelAxisValueIndex, data.normalized[seriesIndex]),","293","            y: chartRect.y1 - valueAxis.projectValue(value && value.y ? value.y : 0, valueIndex, data.normalized[seriesIndex])"],"delete":["287","            x: chartRect.x1 + valueAxis.projectValue(value.x || 0, valueIndex, data.normalized[seriesIndex]),","288","            y: chartRect.y1 - labelAxis.projectValue(value.y || 0, labelAxisValueIndex, data.normalized[seriesIndex])","292","            x: chartRect.x1 + labelAxis.projectValue(value.x || 0, labelAxisValueIndex, data.normalized[seriesIndex]),","293","            y: chartRect.y1 - valueAxis.projectValue(value.y || 0, valueIndex, data.normalized[seriesIndex])","332","        \/\/ For flipped axis we need to normalize the value X and Y values","333","        ;","334",""]}]}},"9ea1f7c25fac31faa30fe16a83f447a9e1c12841":{"changes":{"test\/spec\/spec-line-chart.js":"MODIFY","test\/spec\/spec-axes.js":"MODIFY"},"diff":{"test\/spec\/spec-line-chart.js":[{"add":["463","  describe('Single value data tests', function() {","464","    var data;","465","","466","    beforeEach(function() {","467","      data = {","468","        labels: [1],","469","        series: [[1]]","470","      };","471","    });","472","","473","    function onCreated(callback) {","474","      jasmine.getFixtures().set('<div class=\"ct-chart ct-golden-section\"><\/div>');","475","      var chart = new Chartist.Line('.ct-chart', data);","476","      chart.on('created', callback);","477","    }","478","","479","    it('should render without NaN values and points', function(done) {","480","      onCreated(function() {","481","          expect($('.ct-line').eq(0).attr('d')).toBe('M50,15');","482","          expect($('.ct-point').eq(0).attr('x1')).toBe('50');","483","          expect($('.ct-point').eq(0).attr('x2')).toBe('50.01');","484","          done();","485","        });","486","      });","487","  });","488",""],"delete":[]}],"test\/spec\/spec-axes.js":[{"add":["3","  describe('StepAxis projectValue should not return NaN', function() {","4","    it('should return 0 if options.ticks.length == 1', function() {","5","      var ticks = [1],","6","      axisUnit = {","7","        'pos':'y',","8","        'len':'height',","9","        'dir':'vertical',","10","        'rectStart':'y2',","11","        'rectEnd':'y1',","12","        'rectOffset':'x1'","13","      },","14","      data = {","15","        'raw': {","16","          'series':[[1]]","17","        }","18","      },","19","      chartRect = {","20","        'y2':0,","21","        'y1':15,","22","        'x1':50,","23","        'x2':100","24","      },","25","      options = {","26","        'ticks': ticks","27","      },","28","      stepAxis = new Chartist.StepAxis(axisUnit, data, chartRect, options);","29","      expect(stepAxis.stepLength).toEqual(15);","30","    });","31","  });","32",""],"delete":[]}]}},"388eea89cc267288ab622653e1bee9b222ad86ab":{"changes":{"source\/scripts\/chartist.svg.js":"MODIFY"},"diff":{"source\/scripts\/chartist.svg.js":[{"add":["96","      node.setAttribute('class', '');"],"delete":["96","      node.className = '';"]}]}},"941cd1426e72c37d9f642aabcac6c2a15dbfd19a":{"changes":{"src\/scripts\/charts\/line.js":"MODIFY"},"diff":{"src\/scripts\/charts\/line.js":[{"add":["283","          }, options.classNames.area, true);"],"delete":["283","          }, options.classNames.area, true).attr({","284","            'values': data.normalized[seriesIndex]","285","          }, Chartist.xmlNs.uri);"]}]}}}